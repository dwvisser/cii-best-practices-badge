<%# TODO: Get hostname programmatically. %>
<% badge_hostname= (ENV['PUBLIC_HOSTNAME'] || 'localhost') %>
<% content_for :nav_progress do %>
<div class="progress">
  <div id="badge-progress" class="progress-bar progress-bar-success" role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" style="width: 0%; min-width: 2em;">0%</div>
</div>
<% end %>

<div class="row">
<div class="col-xs-12">

<span id="project_entry_form"></span>
<div class="text-center hidden-print">
<button id="show-all-details" class="btn" title="Show all detailed text" type="button">Show all detailed text</button>
|
<button id="hide-all-details" class="btn" title="Hide all detailed text" type="button">Hide all detailed text</button>
</div>
<div class="hidden">
<%= image_tag "Thumbs_up.svg", id: "Thumbs_up_img" %>
<%= image_tag "Thumbs_down.svg", id: "Thumbs_down_img" %>
</div>

<p>
Open source software (OSS) projects
that follow the best practices below
will be able to voluntarily self-certify and show that they've
achieved a Core Infrastructure Initiative (CII) badge.
</div>
</div>



<div class="row">
<div class="col-xs-12">
<p>
<%= render(partial: "details", locals: {
           criteria: "badge_intro", details: %{
<p>
There is no set of practices that can guarantee that software
will never have defects or vulnerabilities;
even formal methods can fail if the specifications or assumptions are wrong.
Nor is there any set of practices that can guarantee that a project will
sustain a healthy and well-functioning development community.
However, following best practices can help improve the results
of OSS projects.
For example, some practices enable multi-person review before release,
which can both help find otherwise hard-to-find technical vulnerabilities
and help build trust and a desire for repeated interaction among developers
from different companies.
We plan to improve the page design later; for now, please focus on
the criteria and how they're combined.
To earn a badge,
all MUST and MUST NOT criteria must be met,
all SHOULD criteria must be met OR be unmet with justification, <i>and</i>
all SUGGESTED criteria must be met OR unmet (we want them considered at least).
Feedback is welcome via the
<a href="https://github.com/linuxfoundation/cii-best-practices-badge">GitHub site as issues or pull requests</a>
There is also a
<a href="https://lists.coreinfrastructure.org/mailman/listinfo/cii-badges">mailing list for general discussion</a>.<br /><br />
}}) %>
</div>
</div>

<% if (is_disabled) %>
<%   if Project.badge_achieved?(project) %>
<div class="row">
<div class="col-xs-1"></div>
<div class="col-xs-2">
  <%= image_tag "trophy.svg", width: 96, height: 96 %>
</div>
<div class="col-xs-8">
  According to the information below, this project <i>has</i> achieved
  a badge.
  If this is your project, you can show a badge by embedding this HTML:<br />
  &lt;a href='<%= badge_hostname %>/projects/<%= project.id %>'&gt;&lt;img src='<%= badge_hostname %>/projects/<%= project.id %>/badge'&gt;&lt;/a&gt; <br />
  or put this in your markdown file:<br />
 [![CII Best Practices](<%= badge_hostname %>/projects/<%= project.id %>/badge)](<%= badge_hostname %>/projects/<%= project.id %>)
</div>
</div>
<%   end %>
<% else %>
<div class="row">
<div class="col-xs-12">
<b>Please 'submit' often</b> to save your work
(you can always go back and edit more later).
</div>
</div>
<% end %>



<div class="row">
  <div class="col-md-12">

  <%= bootstrap_form_for(project) do |f| %>
    <%= render 'shared/error_messages', object: f.object %>

    <h3 class="center">OSS Project Basics</h3>
    <h4>Identification</h4>
      <span>What is the human-readable name of the project?</span>
<%= render(partial: "details", locals: {
           criteria: "project_name", details: %{
Note that other projects may use the same name.
}}) %>
      <%= f.text_field :name, hide_label: true, class:"form-control", placeholder:'OSS Project Name', disabled: is_disabled %>

      <span>What is a brief description of the project?</span>
<%= render(partial: "details", locals: {
           criteria: "description", details: %{
Include key comments about the project.
This information is used when displaying badge information.
}}) %>
      <%= f.text_area :description, class:"form-control", hide_label: true, placeholder:'Project Description', disabled: is_disabled %>

      <span>What is the URL for the project (as a whole)?</span>
      <%= f.text_field :project_homepage_url, hide_label: true, class: "form-control", placeholder:'Project Website URL', label: "Project URL", disabled: is_disabled %>

      <span>What is the URL for the version control repository
            (it may the same as the project URL)?</span>
      <%= f.text_field :repo_url, class:"form-control", hide_label: true, placeholder:'Project Repo URL', disabled: is_disabled %>

<!-- TODO: MUST have a project or repo URL, SUGGESTED to use HTTPS.
     However, first is implied by "description_sufficient",
     and the MITM stuff notes https as a way to implement it. -->

      <span>What is the
            <a href="https://nvd.nist.gov/cpe.cfm">Common Platform Enumeration (CPE)</a>
            name for the project (if it has one)?</span>
       <%= render(partial: "details", locals: {
           criteria: "cpe", details: %{
            The <a href="https://nvd.nist.gov/cpe.cfm">Common Platform Enumeration (CPE)</a>
            is a structured naming scheme for information technology systems,
            software, and packages.  It is used in a number of systems and
            databases when reporting vulnerabilities.
}}) %>
      <%= f.text_field :cpe, hide_label: true, class:"form-control", placeholder:'(Optional) CPE name', disabled: is_disabled %>
<br>
   <%# Note: render() accepts met_suppress: ..., unmet_placeholder:  ... %>

   <a data-toggle="collapse" href="#websitecontent">
     <h4>Basic Project Website Content</h4>
   </a>
   <div class="collapse" id="websitecontent">
      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "description_sufficient", desc: %{
The project website MUST succinctly describe what the software does
(what problem does it solve?).},
              details: %{
This MUST be in language that potential users can understand (e.g., it uses minimal jargon).},
              met_placeholder: %{(Optional) Where is the succinct description?  Consider providing a URL.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "interact", desc: %{
The project website MUST provide information on how to: obtain, provide feedback
(as bug reports or enhancements), and contribute to the software.},
              met_placeholder: %{(Optional) Where is this information?  Consider providing URL(s).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "contribution", desc: %{
The information on how to contribute MUST explain the contribution process (e.g., are pull requests used?)},
              met_url: true,
              details: %{
We presume that
<a href="https://guides.github.com/activities/contributing-to-open-source/">projects on GitHub use issues and pull requests</a>
unless otherwise noted.
This information can be short, e.g., stating that the project uses pull requests, an issue tracker, or posts to a mailing list (which one?).},
              met_placeholder: %{(URL required) What is the process? What URL explains it?
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "contribution_criteria", desc: %{
The information on how to contribute SHOULD include the basic criteria for acceptable contributions (e.g., a reference to any required coding standard).},
              met_url: true,
              unmet_placeholder: %{Why are the criteria so obvious that this information isn't needed?
}}) %>
</div>
      <br>

    <a data-toggle="collapse" href="#osslicense">
      <h4>OSS License</h4>
    </a>
    <div class="collapse" id="osslicense">

      <span>What license(s) is the project released under?</span>
      <%= render(partial: "details", locals: {
           criteria: "license", details: %{
Please use <a href="https://spdx.org/licenses/">SPDX license expression format</a>; examples include "Apache-2.0", "BSD-2-Clause", "BSD-3-Clause", "GPL-2.0+", "LGPL-3.0+", "MIT", and "(BSD-2-Clause OR Ruby)".
}}) %>
      <%= f.text_field :license, class:"form-control", hide_label: true, placeholder:'OSS License', list: "license_list", disabled: is_disabled %>
     <!-- Some examples from http://wiki.spdx.org/view/FileNoticeExamples -->
     <datalist id="license_list">
      <select style="display: none;">
        <option value="Apache-2.0">Apache-2.0 {Apache License 2.0}</option>
        <option value="BSD-3-Clause">BSD-3-Clause {BSD 3-clause "New" or "Revised" License}</option>
        <option value="BSD-2-Clause">BSD-2-Clause {BSD 2-clause "Simplified" License}</option>
        <option value="BSD-2-Clause-FreeBSD">BSD-2-Clause-FreeBSD {BSD 2-clause FreeBSD License}</option>
        <option value="CC0-1.0">CC0-1.0 {Creative Commons Zero v1.0 Universal}</option>
        <option value="GPL-2.0">GPL-2.0 {GNU General Public License version 2.0 only}</option>
        <option value="GPL-2.0+">GPL-2.0+ {GNU General Public License version 2.0 or later}</option>
        <option value="GPL-3.0">GPL-3.0 {GNU General Public License version 3.0 only}</option>
        <option value="GPL-3.0+">GPL-3.0+ {GNU General Public License version 3.0 or later}</option>
        <option value="LGPL-2.1+">LGPL-2.1 {GNU Lesser General Public License version 2.1 only}</option>
        <option value="LGPL-2.1+">LGPL-2.1+ {GNU Lesser General Public License version 2.1 or later}</option>
        <option value="LGPL-3.0+">LGPL-3.0 {GNU Lesser General Public License version 3.0 only}</option>
        <option value="LGPL-3.0+">LGPL-3.0+ {GNU Lesser General Public License version 3.0 or later}</option>
        <option value="MIT">MIT</option>
        <option value="(GPL-3.0+ WITH Bison-Exception)">(GPL-3.0+ WITH Bison-Exception)</option>
        <option value="(LGPL-2.0+ AND AML)">(LGPL-2.0+ AND AML) {must meet both the GNU Lesser General Public License version 2.1 or later AND the Apple MIT License}</option>
        <option value="(MPL-1.1 OR GPL-2.0+ OR LGPL-2.1+)">(MPL-1.1 OR GPL-2.0+ OR LGPL-2.1+)</option>
        <option value="(Ruby OR BSD-2-Clause)">(Ruby OR BSD-2-Clause)</option>
      </select>
     </datalist>
      <br>
      <hr>

       <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "oss_license", desc: %{
The software MUST be released as OSS.},
               details: %{
Examples of OSS licenses include the
<a href="http://creativecommons.org/publicdomain/zero/1.0/">CC0</a>, <a href="https://opensource.org/licenses/MIT">MIT</a>, <a href="https://opensource.org/licenses/BSD-2-Clause">BSD 2-clause</a>, <a href="https://opensource.org/licenses/BSD-3-Clause">BSD 3-clause revised</a>, <a href="https://opensource.org/licenses/Apache-2.0">Apache 2.0</a>, <a href="https://opensource.org/licenses/lgpl-license">Lesser GNU General Public License (LGPL)</a>, and the <a href="https://opensource.org/licenses/gpl-license">GNU General Public License (GPL)</a>.
For our purposes, this means that the license MUST be:
<ul>
<li><a href="https://opensource.org/licenses">an approved license by the Open Source Initiative (OSI)</a>, or</li>
<li><a href="https://www.gnu.org/licenses/license-list.html">a free license as approved by the Free Software Foundation (FSF)</a>, or</li>
<li><a href="https://www.debian.org/legal/licenses/">a free license acceptable to Debian main</a>, or</li>
<li><a href="https://fedoraproject.org/wiki/Licensing:Main?rd=Licensing">a "good" license according to Fedora</a>.</li>
</ul>
The software MAY also be licensed other ways (e.g., "GPLv2 or proprietary" is acceptable).
<br>
<br>
<em>Rationale</em>: These criteria are designed for OSS projects, so we need to ensure that they're only used where they apply.  Some projects are thought of as OSS yet are not actually released as OSS (e.g., they might not have any license, in which case the defaults of the country's legal system apply, or they might use a non-OSS license).  Unusual licenses can cause long-term problems for OSS projects and are more difficult for tools to handle.  We expect that more advanced badges would set a higher bar (e.g., that it <em>must</em> be released under an OSI-approved license).
}}) %>
       <hr>

       <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "oss_license_osi", desc: %{
It is SUGGESTED that any required license(s) be
<a href="https://opensource.org/licenses">approved by the
Open Source Initiative (OSI).</a>},
               details: %{
The OSI uses a rigorous approval process to determine
which licenses are OSS.
},
               met_suppress: true,
               unmet_suppress: true
}) %>

       <hr>


       <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "license_location", desc: %{
The project MUST post license(s) in a standard location.},
               met_url: true,
               details: %{
E.g., as a top-level file named LICENSE or COPYING.
License filenames MAY be followed by an extension such as ".txt" or ".md".},
}) %>
</div>
      <br>

    <a data-toggle="collapse" href="#documentation">
      <h4>Documentation</h4>
    </a>
    <div class="collapse" id="documentation">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "documentation_basics", desc: %{
The project MUST provide basic documentation for the software.},
              details: %{
This documentation must be in some media (such as text or video) that includes:
how to install it, how to start it, how to use it (possibly with a tutorial using examples), and
how to use it securely (e.g., what to do and what not to do) if that is an appropriate topic for the software.
The security documentation need not be long (it is better for the software to be designed to be secure by default).},
              met_placeholder: %{(Optional) What URL(s) are the starting points to for documentation?
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "documentation_interface", desc: %{
The project MUST include reference documentation that describes its interface.},
              details: %{
The project MAY use hypertext links to non-project material as documentation.
}}) %>
</div>

      <br>

    <a data-toggle="collapse" href="#other">
      <h4>Other</h4>
    </a>
    <div class="collapse" id="other">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "discussion", desc: %{
The project MUST have one or more mechanisms
for discussion (including proposed changes and issues) that are
searchable, allow messages and topics to be addressed by URL,
enable new people to participate in some of the discussions, and
do not require client-side installation of proprietary software.},
              details: %{
Examples of acceptable mechanisms include
GitHub issue and pull request discussions, Bugzilla, Mantis, and Trac.
Asynchronous discussion mechanisms (like IRC) are acceptable if
they meet these criteria; make sure there is a URL-addressable
archiving mechanism.
Proprietary Javascript, while discouraged, is permitted.
}}) %>
</div>
      <br><hr>

      <h3 class="center">Change Control</h3>

      <a data-toggle="collapse" href="#versioncontrol">
        <h4>Public version-controlled source repository</h4>
      </a>
      <div class="collapse" id="versioncontrol">

       <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "repo_url", desc: %{
The project MUST have a version-controlled source repository that is publicly readable and has a URL (the URL MAY be the same as the project URL).},
               details: %{
The project MAY use private (non-public) branches in specific cases while the change is not publicly released (e.g., for fixing a vulnerability before it is revealed to the public).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "repo_track", desc: %{
The source repository MUST track what changes were made, who made the changes,
and when the changes were made.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "repo_interim", desc: %{
The source repository MUST include interim versions for review between releases;
it MUST NOT include only final releases.},
               details: %{
This enables easy tracking and public review.  Some OSS projects do not use a version control system or do not provide public access to it. The lack of a public version control repository makes it unnecessarily difficult to contribute to a project and to track its progress in detail.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "repo_distributed", desc: %{
It is SUGGESTED that common distributed version control software be used (e.g., git).},
               details: %{
Git is not specifically required and projects
can use centralized version control software
(such as subversion) with justification.
}}) %>
</div>
      <br>

      <a data-toggle="collapse" href="#versionnumber">
        <h4>Version numbering</h4>
      </a>
      <div class="collapse" id="versionnumber">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "version_unique", desc: %{
The project MUST have a unique version number for each release intended
to be used by users.
}}) %>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "version_semver", desc: %{
It is SUGGESTED that the
<a href="http://semver.org">Semantic Versioning (SemVer) format</a>
be used for releases.},
               met_suppress: true,
               details: %{
Commit IDs (or similar) MAY be used as version numbers. They are unique, but note that these can
cause problems for users as they may not be able to determine whether or not they're up-to-date.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "version_tags", desc: %{
It is SUGGESTED that projects identify each release within their version control system.
For example, it is SUGGESTED that those using git identify each
release using git tags.
}}) %>
</div>
      <br>

    <a data-toggle="collapse" href="#changelog">
      <h4>ChangeLog</h4>
    </a>
    <div class="collapse" id="changelog">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "release_notes", desc: %{
The project MUST provide, in each release, release notes that are
a human-readable <i>summary</i> of major changes in that release.},
               met_url: true,
               details: %{
The release notes MUST NOT be the output of a version control log
(e.g., the "git log" command results are not release notes).<br />
The release notes MAY be implemented in a variety of ways.
Many projects provide them in a file named "NEWS", "CHANGELOG",
or "ChangeLog", optionally with extensions such as ".txt", ".md", or ".html".
Historically the term "change log" meant a log of <i>every</i> change,
but to meet these criteria what is needed is a human-readable summary.
The release notes MAY instead be provided by
version control system mechanisms such as the
<a href="https://github.com/blog/1547-release-your-software">GitHub Releases workflow</a>.<br />
<b>Rationale</b>:
Release notes are important because they help users
decide whether or not they will want to update, and what the impact would be
(e.g., if the new release fixes vulnerabilities).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "release_notes_vulns", desc: %{
The release notes MUST identify every publicly known vulnerability
that is fixed in each new release.
}}) %>
</div>
      <br><hr>

      <h3 class="center">Reporting</h3>
      <a data-toggle="collapse" href="#bugreport">
        <h4>Bug reporting process</h4>
      </a>
      <div class="collapse" id="bugreport">

      <!-- TODO: Add report_url to model and database.
      <span>If an issue tracker is used, please provide its URL.
      </span>
      \<\% = f.text_field :report_url , class:"form-control", placeholder:'Issue tracker URL (if any)', disabled: is_disabled % >
      -->

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "report_process", met_url: true, desc: %{
The project MUST provide a process for users to submit bug reports
(e.g., using an issue tracker or a mailing list).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "report_tracker", desc: %{
The project SHOULD use an issue tracker for tracking individual issues.},
              unmet_placeholder: %{Why is there no issue tracker?}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "report_responses", desc: %{
The project MUST acknowledge a majority of bug reports submitted in the last 2-12 months (inclusive); the response need not include a fix.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "enhancement_responses", desc: %{
The project SHOULD respond to most enhancement requests in the last 2-12 months (inclusive). The project MAY choose not to respond.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "report_archive", met_url: true, desc: %{
The project MUST have a publicly available archive for reports and responses for later searching.
}}) %>
</div>
      <br>

    <a data-toggle="collapse" href="#vulnreport">
      <h4>Vulnerability reporting process</h4>
    </a>
    <div class="collapse" id="vulnreport">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "vulnerability_report_process", desc: %{
The project MUST publish the process for reporting vulnerabilities on the project site.},
               met_url: true,
               details: %{
E.g., a clearly designated mailing address on https://PROJECTSITE/security, often security@SOMEWHERE.
This MAY be the same as its bug reporting process.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "vulnerability_report_private", desc: %{
If private vulnerability reports are supported, the project MUST include how
to send the information in a way that is kept private.},
               met_url: true,
               details: %{
E.g., a private defect
report submitted on the web using TLS or an email encrypted using OpenPGP.
If private vulnerability reports are not supported this criterion is
automatically met.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "vulnerability_report_response", desc: %{
The project's initial response time for any vulnerability report received
in the last 6 months MUST be less than or equal to 14 days.
}}) %>
</div>
     <br><hr>

     <h3 class="center">Quality</h3>
    <a data-toggle="collapse" href="#buildsystem">
      <h4>Working build system</h4>
    </a>
    <div class="collapse" id="buildsystem">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "build", desc: %{
If the software requires building for use, the project MUST provide a working
build system that can automatically rebuild the software from source code.},
               details: %{
A build system determines what actions need to occur to rebuild the software (and in what order), and then performs those steps.
<b>Rationale</b>: If a project needs to be built but there is no working build system,
            then potential co-developers will not be able to easily contribute and many security analysis
            tools will be ineffective. Criteria for a working build system are not applicable if there is
            no need to build anything for use.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "build_common_tools", desc: %{
It is SUGGESTED that common tools be used for building the software.},
               details: %{
For example, Maven, Ant, cmake, the autotools, make, or rake.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "build_oss_tools", desc: %{
The project SHOULD be buildable using only OSS tools.
}}) %>
</div>
      <br>
    <a data-toggle="collapse" href="#testsuite">
      <h4>Automated test suite</h4>
    </a>
    <div class="collapse" id="testsuite">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "test", desc: %{
The project MUST have at least one automated test suite that is publicly
released as OSS (this test suite may be maintained as a separate OSS project).},
               details: %{
The project MAY have multiple automated test suites (e.g., one that runs quickly, vs. another that is more thorough but requires special equipment).
<b>Rationale</b>: Automated test suites immediately help detect a variety of problems.  A large test suite can find more problems, but even a small test suite can detect problems and provide a framework to build on.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "test_invocation", desc: %{
A test suite SHOULD be invocable in a standard way for that language.},
               details: %{
For example, "make check", "mvn test", or "rake test".
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "test_most", desc: %{
It is SUGGESTED that the test suite cover most (or ideally all)
the code branches, input fields, and functionality.
}}) %>
      <hr>
      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "test_continuous_integration", desc: %{
It is SUGGESTED that the project implement continuous integration
(where new or changed code is frequently integrated into a central
code repository and automated tests are run on the result).
}}) %>
</div>

    <br>

    <a data-toggle="collapse" href="#newtesting">
      <h4>New functionality testing</h4>
    </a>
    <div class="collapse" id="newtesting">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "test_policy", desc: %{
The project MUST have a general policy (formal or not) that as major
new functionality is added, tests of that functionality SHOULD
be added to an automated test suite.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "tests_are_added", desc: %{
The project MUST have evidence that such tests are being added in
the most recent major changes to the project.},
               details: %{
Major functionality would typically be mentioned in the ChangeLog.
(Perfection is not required, merely evidence
that tests are typically being added in practice.)
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "tests_documented_added", desc: %{
It is SUGGESTED that this policy on adding tests be
<i>documented</i> in the instructions for change proposals.},
               details: %{
However, even an informal rule is acceptable as long as the tests are being
added in practice.
}}) %>
</div>
    <br>

    <a data-toggle="collapse" href="#warningflags">
      <h4>Warning flags</h4>
    </a>
    <div class="collapse" id="warningflags">

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "warnings", desc: %{
The project MUST enable one or more compiler warning flags, a "safe"
language mode, or use a separate "linter" tool to look for code quality
errors or common simple mistakes, if there is at least one OSS tool that
can implement this criterion in the selected language.},
               details: %{
Examples of compiler warning flags include gcc/clang "-Wall".
Examples of a "safe" language mode include Javascript "use strict"
and perl5's "use warnings".
A separate "linter" tool is simply a tool that examines the
source code to look for code quality errors or common simple mistakes.
}}) %>

      <hr>
      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "warnings_fixed", desc: %{
The project MUST address warnings.},
               details: %{The project should fix warnings or mark them in the source code as false positives.  Ideally there would be no warnings, but a project MAY accept some warnings (typically less than 1 warning per 100 lines or less than 10 warnings).
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
               criteria: "warnings_strict", desc: %{
It is SUGGESTED that projects be maximally strict with warnings, but this is not
always practical.
}}) %>
</div>
    <br><hr>
    <h3 class="center">Security</h3>

    <a data-toggle="collapse" href="#secureknowledge">
      <h4>Secure development knowledge</h4>
    </a>
    <div class="collapse" id="secureknowledge">

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "know_secure_design", desc: %{
The project MUST have at least one primary developer who knows
how to design secure software.},
             details: %{
This requires understanding the following design principles, including the 8 principles from <a href="http://web.mit.edu/Saltzer/www/publications/protection/">Saltzer and Schroeder</a>:
<ul>
<li>economy of mechanism (keep the design as simple and small as practical, e.g., by adopting sweeping simplifications)
<li>fail-safe defaults (access decisions should deny by default, and
projects' installation should be secure by default)
<li>complete mediation (every access that might be limited must be checked for authority and be non-bypassable)
<li>open design (security mechanisms should not depend on attacker ignorance of its design, but instead on more easily protected and changed information like keys and passwords)
<li>separation of privilege (multi-factor authentication, such as requiring both a password and a hardware token, is stronger than single-factor authentication)
<li>least privilege (processes should operate with the least privilege necessary)
<li>least common mechanism (the design should minimize the mechanisms common to more than one user and depended on by all users, e.g., directories for temporary files)
<li>psychological acceptability (the human interface must be designed for ease of use - designing for "least astonishment" can help)
<li>limited attack surface (the attack surface - the set of the different points where an attacker can try to enter or extract data - should be limited)
<li>input validation with whitelists (inputs should typically be checked to determine if they are valid before they are accepted; this validation should use whitelists (which only accept known-good values),
not blacklists (which attempt to list known-bad values)).
</ul>
A "primary developer" in a project is anyone who is familiar with
the project's code base, is comfortable making changes to it, and is
acknowledged as such by most other participants in the project.
A primary developer would typically make a number of contributions
over the past year (via code, documentation, or answering questions).
Developers would typically be considered primary developers if they
initiated the project (and have not left the project more than three
years ago), have the option of receiving information on a private
vulnerability reporting channel (if there is one), can accept commits
on behalf of the project, or perform final releases of the project
software.
If there is only one developer, that individual is the primary developer.
}}) %>

    <hr>
    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "know_common_errors", desc: %{
At least one of the primary developers MUST know of common kinds of errors that
lead to vulnerabilities in this kind of software, as well as at least one method
to counter or mitigate each of them.},
             details: %{
Examples (depending on the type of software)
include SQL injection, OS injection, classic buffer overflow,
cross-site scripting, missing authentication, and missing authorization.
See the <a href="http://cwe.mitre.org/top25/">CWE/SANS top 25</a> or
<a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">OWASP Top 10</a>
for commonly-used lists.
}}) %>
</div>
    <br>

    <a data-toggle="collapse" href="#goodcrypto">
      <h4>Good cryptographic practices</h4>
    </a>
    <div class="collapse" id="goodcrypto">

<span class="criteria-desc">
Note that some software does not need to directly use cryptographic capabilities.
A "project security mechanism" is a security mechanism
provided by the delivered project's software.
</span>
<% if (!is_disabled) %>
  <br><br>
  <button class="btn btn-default hidden-print" type="button" id='all_crypto_na'>Press here if the project does not use or need cryptographic mechanisms</button>
  <br>
<% end %>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_published", desc: %{
The project's cryptographic software MUST use only cryptographic protocols
and algorithms that are publicly published and reviewed by experts.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_call", desc: %{
If the project software is an application or library, and its primary
purpose is not to implement cryptography, then it MUST only call on software
specifically designed to implement cryptographic functions; it MUST NOT
re-implement its own.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_oss", desc: %{
All functionality that depends on cryptography MUST be implementable using
OSS because its specification meets the
<a href="https://opensource.org/osr">Open Standards Requirement for Software
by the Open Source Initiative</a>.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_keylength", desc: %{
The default keylengths MUST meet the NIST minimum requirements at least through the year 2030 (as stated in 2012).},
             details: %{
These minimum bitlengths are: symmetric key 112, factoring modulus 2048,
discrete logarithm key 224,
discrete logarithmic group 2048, elliptic curve 224,
and hash 224 (password hashing is not covered by this
bitlength, more information on password hashing can be found in the
<a href="#crypto_password_storage">crypto_password_storage</a> criterion).
See <a href="http://www.keylength.com">http://www.keylength.com</a>
for a comparison of keylength recommendations from various organizations.
The software MUST be configurable so that it will reject smaller keylengths.
The software MAY allow smaller keylengths in some configurations (ideally it would not, since this allows
downgrade attacks, but shorter keylengths are sometimes necessary for
interoperability.)
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_working", desc: %{
The project security mechanisms MUST NOT depend on cryptographic algorithms that are broken (e.g., MD4, MD5, single DES, RC4, or Dual_EC_DRBG).
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_weaknesses", desc: %{
The project security mechanisms SHOULD NOT by default depend on cryptographic algorithms with known serious weaknesses (e.g., SHA-1).
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_alternatives", desc: %{
The project SHOULD support multiple cryptographic algorithms, so users can quickly switch if one is broken.},
             details: %{
Common symmetric key algorithms include AES, Twofish, Serpent, Blowfish, and 3DES.  Common cryptographic hash algorithm alternatives include SHA-2 (including SHA-224, SHA-256, SHA-384 and SHA-512) and SHA-3.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_pfs", desc: %{
The project SHOULD implement perfect forward secrecy for key agreement protocols so a session key derived from a set of long-term keys cannot be compromised if one of the long-term keys is compromised in the future.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_password_storage", desc: %{
If passwords are stored for authentication of external users, the project MUST store them as iterated hashes with a per-user salt by using a key stretching (iterated) algorithm (e.g., PBKDF2, Bcrypt or Scrypt).
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "crypto_random", desc: %{
The project MUST generate all cryptographic keys and nonces
using a cryptographically secure random number generator,
and MUST NOT do so using generators that are not cryptographically secure.
A cryptographically secure random number generator may be a
hardware random number generator, or it may be
a cryptographically secure pseudo-random number generator (CSPRNG) using
an algorithm such as Hash_DRBG, HMAC_DRBG, CTR_DRBG, Yarrow, or Fortuna.
}}) %>
</div>
    <br>

    <a data-toggle="collapse" href="#mitmattacks">
      <h4>Secured delivery against man-in-the-middle (MITM) attacks</h4>
    </a>
    <div class="collapse" id="mitmattacks">

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "delivery_mitm", desc: %{
The project MUST use a delivery mechanism that counters MITM attacks.
Using https or ssh+scp is acceptable.},
             details: %{
An even stronger mechanism is releasing
the software with digitally signed packages, since that mitigates attacks on the distribution system,
but this only works if the users can be confident that the public keys for signatures are correct
<i>and</i> if the users will actually check the signature.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "delivery_unsigned", desc: %{
A cryptographic hash (e.g., a sha1sum) MUST NOT be retrieved over http and
used without checking for a cryptographic signature.},
             details: %{
These hashes can be modified in transit.
}}) %>
</div>
  <br>

  <a data-toggle="collapse" href="#knownvulnerabilities">
    <h4>Publicly-known vulnerabilities fixed</h4>
  </a>
  <div class="collapse" id="knownvulnerabilities">

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "vulnerabilities_fixed_60_days", desc: %{
There MUST be no unpatched vulnerabilities of medium or high severity that
have been publicly known for more than 60 days.},
             details: %{
The vulnerability must be patched and
released by the project itself (patches may be developed elsewhere).
A vulnerability becomes publicly known (for this purpose) once it has a CVE with
publicly released non-paywalled information (reported, for example,
in the <a href="https://nvd.nist.gov/">National Vulnerability Database</a>) or when the project has been informed and the
information has been released to the public (possibly by the project). A vulnerability is medium
to high severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> base score is 4 or higher.
<br><br>
<b>Note</b>: this means that users might be left vulnerable to all attackers
worldwide for up to 60 days. This criterion is often much easier to meet than what Google recommends in
<a href="http://googleonlinesecurity.blogspot.com/2010/07/rebooting-responsible-disclosure-focus.html">Rebooting responsible disclosure</a>, because Google recommends that the 60-day period start when the project is notified <em>even</em> if the report is not public.<br>
<b>Rationale</b>: We intentionally chose to start measurement from the time of public knowledge,
and not from the time reported to the project, because this is much easier to measure and
verify by those outside the project.
}}) %>
    <hr>

    <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "vulnerabilities_critical_fixed", desc: %{
Projects SHOULD fix all critical vulnerabilities rapidly after they
are reported.
}}) %>
</div>

    <br><hr>
    <h3 class="center">Analysis</h3>

    <a data-toggle="collapse" href="#staticanalysis">
      <h4>Static code analysis</h4>
    </a>
    <div class="collapse" id="staticanalysis">

     <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "static_analysis", desc: %{
At least one static code analysis tool MUST be applied to any proposed major production
release of the software before its release, if there is at least one OSS tool that
implements this criterion in the selected language.},
             details: %{
A static code analysis tool examines
the software code (as source code, intermediate code, or executable) without executing it
with specific inputs.
For purposes of this criterion, compiler warnings and "safe"
language modes do not count as static code analysis tools
(these typically avoid deep analysis because speed is vital).
Examples of such static code analysis tools include <a href="http://cppcheck.sourceforge.net/">cppcheck</a>, <a href="http://clang-analyzer.llvm.org/">clang static analyzer</a>, <a href="http://findbugs.sourceforge.net/">FindBugs</a> (including <a href="https://h3xstream.github.io/find-sec-bugs/">FindSecurityBugs</a>), <a href="https://pmd.github.io/">PMD</a>, <a href="http://brakemanscanner.org/">Brakeman</a>, <a href="https://scan.coverity.com/">Coverity Quality Analyzer</a>, and <a href="http://www8.hp.com/au/en/software-solutions/static-code-analysis-sast/index.html">HP Fortify Static Code Analyzer</a>.  Larger lists of tools can be found in places such as the <a href="https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis">Wikipedia list of tools for static code analysis</a>, <a href="https://www.owasp.org/index.php/Static_Code_Analysis">OWASP information on static code analysis</a>, <a href="http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html">NIST list of source code security analyzers</a>, and <a href="http://www.dwheeler.com/essays/static-analysis-tools.html">Wheeler's list of static analysis tools</a>.  The <a href="https://continuousassurance.org/">SWAMP</a> is a no-cost platform for assessing vulnerabilities in software using a variety of tools.
}}) %>
     <br>

     <hr>

     <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "static_analysis_common_vulnerabilities", desc: %{
It is SUGGESTED that the tool include rules or approaches to look for
common vulnerabilities in the analyzed language or environment.
}}) %>
     <hr>

     <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "static_analysis_fixed", desc: %{
All confirmed medium and high severity exploitable vulnerabilities discovered with static code analysis MUST be fixed.},
             details: %{
A vulnerability is medium to high severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> is 4 or higher.
}}) %>
     <hr>

     <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
             criteria: "static_analysis_often", desc: %{
It is SUGGESTED that static source code analysis occur on every commit or at least daily.
}}) %>
</div>
     <br>

     <a data-toggle="collapse" href="#dynamicanalysis">
       <h4>Dynamic analysis</h4>
     </a>
     <div class="collapse" id="dynamicanalysis">


      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "dynamic_analysis", desc: %{
It is SUGGESTED that at least one dynamic analysis tool be applied to any proposed major production
release of the software before its release.},
              details: %{
A dynamic analysis tool examines the software
by executing it with specific inputs.
For example, the project MAY use a fuzzing tool (e.g., <a href="http://lcamtuf.coredump.cx/afl/">American Fuzzy Lop</a>) or a web application scanner (e.g., <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">OWASP ZAP</a> or <a href="http://w3af.org/">w3af</a>).  For purposes of this criterion the dynamic analysis tool needs to vary the inputs in some way to look for various kinds of problems <em>or</em> be an automated test suite with at least 80% branch coverage.  The <a href="https://en.wikipedia.org/wiki/Dynamic_program_analysis">Wikipedia page on dynamic analysis</a> and the <a href="https://www.owasp.org/index.php/Fuzzing">OWASP page on fuzzing</a> identify some dynamic analysis tools.
<br>
The analysis tool(s) MAY be focused on looking for security vulnerabilities, but this is not required.
<b>Rationale:</b> Static source code analysis and dynamic analysis tend
to find different kinds of defects (including defects that lead to vulnerabilities), so combining them is more likely to be effective.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "dynamic_analysis_unsafe", desc: %{
It is SUGGESTED that if the software is application-level software written
using a memory-unsafe language (such as C or C++) then at least one tool to
detect memory safety problems will be used during at least one dynamic tool use.
},
              details: %{
Examples of memory safety tools include Address Sanitizer (ASAN) and
<a href="http://valgrind.org/">valgrind</a>.
If the software is not application-level,
or is not in a memory-unsafe language, then this criterion is
automatically met.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "dynamic_analysis_enable_assertions", desc: %{
It is SUGGESTED that the software include many run-time assertions
that are checked during dynamic analysis.
}}) %>
      <hr>

      <%= render(partial: "status_chooser", locals: {f: f, is_disabled: is_disabled,
              criteria: "dynamic_analysis_fixed", desc: %{
All confirmed medium and high severity exploitable vulnerabilities discovered
with dynamic code analysis MUST be fixed. A vulnerability is medium to high
severity if its <a href="https://nvd.nist.gov/cvss.cfm">CVSS 2.0</a> base score is 4 or higher.
}}) %>
</div>
      <hr>

      <br>
      <div class="row">
        <div class="col-md-12">
          <%= f.text_area :general_comments, class:"form-control",  hide_label: true, placeholder:'Additional Comments', disabled: is_disabled %>
        </div>
      </div>
      <br>
      <% if ! is_disabled %>
        <%= f.submit 'Submit', class:"btn btn-primary" %>
      <% end %>
    <% end %>
  </div>
</div>
